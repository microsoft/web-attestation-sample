// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

import { type serialization, type IssuerParamsJWK } from 'uprove-node-reference'

export interface IssuerParamsJWKS {
    keys: IssuerParamsJWK[]
}

// initial token request from client (Prover)
export interface TokenRequestMessage {
    n?: number // number of tokens requested
    rID?: string // refresh ID
}

// first issuance message from Issuer
export interface FirstIssuanceMessage {
    kid: string // key ID
    sID: string // session ID
    rID: string // refresh ID
    TI: string // Token Information
    msg: serialization.FirstIssuanceMessageJSON
}

// second issuance message from client (Prover)
export interface SecondIssuanceMessage {
    sID: string // session ID
    msg: serialization.SecondIssuanceMessageJSON
}

// third issuance message from Issuer
export interface ThirdIssuanceMessage {
    sID: string // session ID
    msg: serialization.ThirdIssuanceMessageJSON
}

// the presentation message consists of a verifier UID, a nonce, and a timestamp. It is
// non-interactively generated by the prover in this sample
export interface PresentationMessage {
    vID: string // verifier UID
    nce: string // nonce, random value
    ts: string // timestamp, in ms
}

export function parsePresentationMessage (pm: Uint8Array): PresentationMessage {
    const presentationMessage = JSON.parse(Buffer.from(pm).toString()) as PresentationMessage
    return presentationMessage
}

export function encodePresentationMessage (pm: PresentationMessage): Uint8Array {
    return Buffer.from(JSON.stringify(pm))
}
